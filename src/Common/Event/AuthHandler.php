<?php

/*
 * This file is part of the VIA-eBay package.
 *
 * (c) VIA-Online GmbH | eBay Inc. <thoffmann@ebay.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Via\Common\Event;

use GuzzleHttp\ClientInterface;
use GuzzleHttp\Event\SubscriberInterface;
use GuzzleHttp\Url;

/**
 * Description of AuthHandler
 *
 * @author VIA-Online GmbH | eBay Inc. <thoffmann@ebay.com>
 */
class AuthHandler implements SubscriberInterface
{

    /**
     * @var Token The token which is the basis of authentication
     */
    private $token;

    /**
     * @var array User-defined configuration options
     */
    private $options;

    /**
     * @var ClientInterface The HTTP client
     */
    private $httpClient;

    /**
     * @var \Via\Common\Auth\Catalog
     */
    private $catalog;

    /**
     * @param ClientInterface $httpClient The HTTP client which sends requests
     * @param array $options User-defined options
     * @param Token $token An optional token that has already been
     * issued beforehand
     * @param Catalog $catalog An optional catalog that has already
     * been populated beforehand
     */
    public function __construct(
    ClientInterface $httpClient, array $options, Token $token = null, Catalog $catalog = null
    )
    {
        $this->httpClient = $httpClient;
        $this->options = $options;
        $this->token = $token;
        $this->catalog = $catalog;
    }

    public function getEvents()
    {
        return [
            'prepare' => ['onPrepare', 200]
        ];
    }

    /**
     * This method is invoked when the `before` event is dispatched by the
     * HTTP client. The Client passes this object an event (the only argument)
     * which then allows it to modify the request according to how it sees fit.
     *
     * @param PrepareEvent $event The event which contains the request along with
     * other pertinent information. The event is
     * mutable, so it acts as a communication device
     * between objects.
     */
    public function onPrepare(PrepareEvent $event)
    {
        $event->getRequest()->setHeader('Username', $this->options['username']);
        $event->getRequest()->setHeader('Password', $this->options['password']);
        $event->getRequest()->setHeader('SubscriptionToken', $this->options['subscription_token']);
        $event->getRequest()->setHeader('Vendor', $this->options['vendor']);
        $event->getRequest()->setHeader('Version', $this->options['version']);
    }

    /**
     * Internal method which authenticates by POSTing a request to the API and
     * parsing the HTTP response. It returns the token ID generated by the
     * server.
     *
     * @return string
     * @throws \RuntimeException The HTTP response could not be parsed
     */
//    private function authenticate()
//    {
//        $body = (object) ['auth' => [
//                        'tenantName' => $this->options['tenantName'],
//                        'passwordCredentials' => [
//                            'username' => $this->options['username'],
//                            'password' => $this->options['password']
//                        ]
//        ]];
//        $url = Url::fromString($this->options['authUrl'] . '/tokens');
//        $body = $this->httpClient->post($url, [
//                    'headers' => ['Content-Type' => 'application/json'],
//                    'body' => json_encode($body)
//                ])->json();
//        $this->setTokenFromArray($body);
//        $this->setCatalogFromArray($body);
//    }
//
//    /**
//     * Internal method that takes an array and extracts the necessary data to
//     * instantiate and set a {@see Token}
//     *
//     * @param array $body
//     *
//     * @throws \RuntimeException If the array is not structured in the correct way
//     */
//    private function setTokenFromArray(array $body)
//    {
//        if (!isset($body['access']['token'])) {
//            throw new \RuntimeException('No token object was returned in the API response');
//        }
//        $tokenData = $body['access']['token'];
//        $this->token = new Token($tokenData['id'], $tokenData['expires']);
//    }
//
//    /**
//     * Internal method that takes an array and extracts the necessary data to
//     * instantiate and set a {@see Catalog}
//     *
//     * @param array $body
//     *
//     * @throws \RuntimeException If the array is not structured in the correct way
//     */
//    private function setCatalogFromArray(array $body)
//    {
//        if (!isset($body['access']['serviceCatalog'])) {
//            throw new \RuntimeException('No token object was returned in the API response');
//        }
//        $this->catalog = new Catalog($body['access']['serviceCatalog']);
//    }

}
